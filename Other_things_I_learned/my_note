In C++, you don't use the new keyword when creating an object of a class unless you want the object to be dynamically allocated on the heap. 

========================================================================

In C++, when you create an object, you can choose to allocate it on the stack or dynamically on the heap. Here are the main differences:

Stack Allocation:

1). Memory is automatically managed. Objects are destroyed as soon as they go out of scope. 

2). Allocation and deallocation are fast. 

3). Space is limited. The stack is typically much smaller than the heap.

4). If you allocate a large amount of memory on the stack, you might encounter a stack overflow. 

Dynamic Allocation (Heap):

1). You manually manage memory. You use new to allocate memory and delete to deallocate it. 

2). Allocation and deallocation are slower.

3). Space is usually only limited by the size of the addressable memory.

4). If you forget to delete memory, it causes a memory leak. 

========================================================================

Calculating AREA! 

Use Shoelace formula to calculate area of simple polygons with given vertices. 

- Simple polygon: a polygon that has non-intersecting edges. This means that except at the vertices, no two edges of the polygon cross or touch each other. 

- The order of the vertices should be clockwise or anti-clockwise. 

- The starting (ending) point does not need to be repeated. 

If it's a grid-based system, use Pick's theorem to calculate the area including the edge. 

========================================================================

In object-oriented programming, a class variable is a variable that is shared by all instances (objects) of a class. This means that if you change the value of a class variable, it will be changed for all instances of the class. Class variables are typically used for class-wide constants or default values. 

Here's an example of a class variable in Python: 

class MyClass:
    class_variable = "I'm a class variable"

An instance variable, on the other hand, is a variable that belongs to an instance of a class. Each instance of a class has its own copy of the instance variables, so changes to an instance variable in one instance do not affect other instances. 

Here's an example of an instance variable in Python: 

class MyClass:
    def __init__(self):
        self.instance_variable = "I'm an instance variable"

========================================================================